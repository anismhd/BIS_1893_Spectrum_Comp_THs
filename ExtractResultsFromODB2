import numpy as np
import glob 
import pickle

main_dir = "I:\\SG11_REBOOT\\CVR_SpectrumCompatibleTHs\\"
loadstep = "Step-2"

# Abaqus Classes
from odbAccess import *
from abaqusConstants import *
IS_Nodes = [22,21,20,19,18,17,15,16]
IC_Nodes = [34,33,32,31,30,29,28,27,26,25,23,24]
IS_Elem = [72,71,70,69,68,67,66]
IC_Elem = [83,82,81,80,79,78,77,76,75,74,73]
SF3 = {}
Ax = {}
odb_files = glob.glob(main_dir+"RevisedABAQUSStudy\\*.odb")
for i,odb_in in enumerate(odb_files):
	print("({0:d}/{1:d})-{2:s}".format(i+1,len(odb_files),odb_in))
	acc_id = odb_in.split('\\')[-1][:-4]
	odb = openOdb(path=odb_in, readOnly=True)
	SF3[acc_id] = {}
	Ax[acc_id] = {}
	time = []
	for frame in odb.steps[loadstep].frames:
		SF = frame.fieldOutputs['SF']
		ACC = frame.fieldOutputs['A']
		time.append(frame.frameValue)
		for j in range(len(SF.values)):
			if SF.values[j].elementLabel in IS_Elem+IC_Elem:
				if SF.values[j].elementLabel in SF3[acc_id].keys():
					SF3[acc_id][SF.values[j].elementLabel].append(\
						SF.values[j].data[2])
				else:
					SF3[acc_id][SF.values[j].elementLabel] = \
						[SF.values[j].data[2]]
		for j in range(len(ACC.values)):
			if ACC.values[j].nodeLabel in IS_Nodes+IC_Nodes:
				if ACC.values[j].nodeLabel in Ax[acc_id].keys():
					Ax[acc_id][ACC.values[j].nodeLabel].append(\
						ACC.values[j].data[0])
				else:
					Ax[acc_id][ACC.values[j].nodeLabel] = \
						[ACC.values[j].data[0]]
	odb.close()
	SF3_fname = open("{0:s}_SF3.csv".format(acc_id),'w')
	Ax_fname = open("{0:s}_Ax.csv".format(acc_id), "w")
	time_str = "0"
	for val in time:
		time_str = time_str+ ",{0:f}".format(val)
	SF3_fname.write(time_str+'\n')
	Ax_fname.write(time_str+'\n')
	for eid,th in SF3[acc_id].items():
		list_str = ""
		for val in th:
			list_str = list_str+ ",{0:f}".format(val)
		SF3_fname.write("{0:d}{1:s}\n".format(eid,list_str))
	for nid,th in Ax[acc_id].items():
		list_str = ""
		for val in th:
			list_str = list_str+ ",{0:f}".format(val)
		Ax_fname.write("{0:d}{1:s}\n".format(nid,list_str))
	SF3_fname.close()
	Ax_fname.close()

pickle.dump(SF3, open('SF3.pkl','wb'))
pickle.dump(Ax, open('Ax.pkl','wb'))